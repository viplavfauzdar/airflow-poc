services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"

  airflow-init:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.3}
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    user: "0:0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements/requirements.txt
      - airflow-logs:/opt/airflow/logs
      - airflow-config:/opt/airflow/config
    command: bash -c "airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"

  airflow-webserver:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.3}
    depends_on:
      - airflow-init
      - postgres
      - redis
      - airflow-scheduler
      - airflow-worker
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      _PIP_ADDITIONAL_REQUIREMENTS: -r /requirements/requirements.txt
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements/requirements.txt
      - airflow-logs:/opt/airflow/logs
      - airflow-config:/opt/airflow/config
      - ./data:/opt/airflow/data
    command: webserver

  airflow-scheduler:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.3}
    depends_on:
      - airflow-init
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      _PIP_ADDITIONAL_REQUIREMENTS: -r /requirements/requirements.txt
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements/requirements.txt
      - airflow-logs:/opt/airflow/logs
      - airflow-config:/opt/airflow/config
      - ./data:/opt/airflow/data
    command: scheduler

  airflow-worker:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.3}
    depends_on:
      - airflow-init
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      _PIP_ADDITIONAL_REQUIREMENTS: -r /requirements/requirements.txt
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements/requirements.txt
      - airflow-logs:/opt/airflow/logs
      - airflow-config:/opt/airflow/config
      - ./data:/opt/airflow/data
    command: celery worker

  warehouse-db:
    image: postgres:15
    environment:
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo
      POSTGRES_DB: warehouse
    ports:
      - "5433:5432"
    volumes:
      - warehouse-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo"]
      interval: 10s
      retries: 5
      start_period: 10s

volumes:
  postgres-db-volume:
  airflow-logs:
  airflow-config:
  warehouse-db-volume:
